After grid search
==============Naive bayes=======================
0.8180196253345228 {'classifier__alpha': 0.01, 'vectorizer__ngram_range': (1, 2)}
========summary of results =========
   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \
0      22.688231      0.372128         5.561526        0.086512   
1      24.142118      0.672206         5.754192        0.190155   
2      22.779504      0.392514         5.611087        0.136119   
3      23.687919      0.439173         5.753147        0.142246   

  param_classifier__alpha param_vectorizer__ngram_range  \
0                    0.01                        (1, 1)   
1                    0.01                        (1, 2)   
2                   0.001                        (1, 1)   
3                   0.001                        (1, 2)   

                                              params  split0_test_score  \
0  {'classifier__alpha': 0.01, 'vectorizer__ngram...           0.804444   
1  {'classifier__alpha': 0.01, 'vectorizer__ngram...           0.813333   
2  {'classifier__alpha': 0.001, 'vectorizer__ngra...           0.802222   
3  {'classifier__alpha': 0.001, 'vectorizer__ngra...           0.806667   

   split1_test_score  split2_test_score  split3_test_score  split4_test_score  \
0           0.801782           0.825893           0.823661           0.789709   
1           0.819599           0.819196           0.823661           0.814318   
2           0.804009           0.825893           0.814732           0.782998   
3           0.804009           0.821429           0.816964           0.816555   

   mean_test_score  std_test_score  rank_test_score  
0         0.809099        0.013739                3  
1         0.818020        0.003778                1  
2         0.805977        0.014264                4  
3         0.813113        0.006639                2  
===================================================================


==============logistic regression=======================

0.8545941123996432 {'classifier__max_iter': 100, 'vectorizer__ngram_range': (1, 2)}
========summary of results=========
   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \
0      22.764195      0.290271         5.599235        0.133466   
1      24.437452      0.148999         5.766264        0.122708   
2      22.851874      0.588810         5.781172        0.345454   
3      25.299051      0.604006         5.814612        0.198819   
4      23.451110      0.622963         5.980245        0.688224   
5      31.159743      2.690953         7.087387        1.339426   

  param_classifier__max_iter param_vectorizer__ngram_range  \
0                        100                        (1, 1)   
1                        100                        (1, 2)   
2                        200                        (1, 1)   
3                        200                        (1, 2)   
4                        300                        (1, 1)   
5                        300                        (1, 2)   

                                              params  split0_test_score  \
0  {'classifier__max_iter': 100, 'vectorizer__ngr...           0.862222   
1  {'classifier__max_iter': 100, 'vectorizer__ngr...           0.866667   
2  {'classifier__max_iter': 200, 'vectorizer__ngr...           0.862222   
3  {'classifier__max_iter': 200, 'vectorizer__ngr...           0.866667   
4  {'classifier__max_iter': 300, 'vectorizer__ngr...           0.862222   
5  {'classifier__max_iter': 300, 'vectorizer__ngr...           0.866667   

   split1_test_score  split2_test_score  split3_test_score  split4_test_score  \
0           0.844098           0.852679           0.857143           0.852349   
1           0.844098           0.859375           0.848214           0.854586   
2           0.844098           0.852679           0.857143           0.852349   
3           0.844098           0.859375           0.848214           0.854586   
4           0.844098           0.852679           0.857143           0.852349   
5           0.844098           0.859375           0.848214           0.854586   

   mean_test_score  std_test_score  rank_test_score  
0         0.853702        0.005999                4  
1         0.854594        0.008001                1  
2         0.853702        0.005999                4  
3         0.854594        0.008001                1  
4         0.853702        0.005999                4  
5         0.854594        0.008001                1  
===================================================================
==============SVM=======================
0.8626226583407671 {'classifier__alpha': 0.001, 'vectorizer__ngram_range': (1, 1)}
========summary of results=========
   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \
0      22.673208      0.188611         5.647515        0.218818   
1      23.543279      0.230599         5.917247        0.177583   
2      22.519377      0.120503         5.621966        0.138379   
3      24.309343      1.484284         5.941747        0.410785   
4      22.132122      0.224035         5.535609        0.158758   
5      23.629941      0.242636         5.759299        0.185724   

  param_classifier__alpha param_vectorizer__ngram_range  \
0                    0.01                        (1, 1)   
1                    0.01                        (1, 2)   
2                   0.001                        (1, 1)   
3                   0.001                        (1, 2)   
4                  0.0001                        (1, 1)   
5                  0.0001                        (1, 2)   

                                              params  split0_test_score  \
0  {'classifier__alpha': 0.01, 'vectorizer__ngram...           0.835556   
1  {'classifier__alpha': 0.01, 'vectorizer__ngram...           0.831111   
2  {'classifier__alpha': 0.001, 'vectorizer__ngra...           0.866667   
3  {'classifier__alpha': 0.001, 'vectorizer__ngra...           0.860000   
4  {'classifier__alpha': 0.0001, 'vectorizer__ngr...           0.840000   
5  {'classifier__alpha': 0.0001, 'vectorizer__ngr...           0.848889   

   split1_test_score  split2_test_score  split3_test_score  split4_test_score  \
0           0.841871           0.830357           0.832589           0.823266   
1           0.830735           0.841518           0.841518           0.834452   
2           0.855234           0.863839           0.866071           0.861298   
3           0.832962           0.863839           0.857143           0.854586   
4           0.853007           0.845982           0.859375           0.863535   
5           0.850780           0.868304           0.852679           0.854586   

   mean_test_score  std_test_score  rank_test_score  
0         0.832739        0.006109                6  
1         0.835861        0.004793                5  
2         0.862623        0.004152                1  
3         0.853702        0.010824                3  
4         0.852364        0.008579                4  
5         0.855040        0.006895                2  
===================================================================
==============Random forest=======================
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
C:\Users\akhil\Anaconda3\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  "10 in version 0.20 to 100 in 0.22.", FutureWarning)
0.7809991079393399 {'vectorizer__ngram_range': (1, 1)}
========summary of results=========
   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \
0      22.990292      0.226039         5.609174        0.131777   
1      26.634265      1.134412         5.905170        0.274174   

  param_vectorizer__ngram_range                               params  \
0                        (1, 1)  {'vectorizer__ngram_range': (1, 1)}   
1                        (1, 2)  {'vectorizer__ngram_range': (1, 2)}   

   split0_test_score  split1_test_score  split2_test_score  split3_test_score  \
0           0.773333           0.777283           0.787946           0.767857   
1           0.757778           0.757238           0.765625           0.783482   

   split4_test_score  mean_test_score  std_test_score  rank_test_score  
0           0.798658         0.780999        0.010995                1  
1           0.774049         0.767618        0.010017                2  
